{"version":3,"sources":["useGameState.tsx","Game.tsx","App.tsx","index.tsx"],"names":["useGameState","useState","stepNumber","setStepNumber","nextPlayer","setNextPlayer","Array","fill","currentBoard","setCurrentBoard","computeMove","squareId","currentStepNumber","resetGame","calculateWinner","squares","lines","i","length","a","b","c","ResetButton","isDisplayed","onClick","Square","id","value","className","Board","onSquareClick","renderSquare","Game","role","winner","renderStatusMessage","App","rootElement","document","getElementById","render"],"mappings":"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","file":"static/js/main.10951868.chunk.js","sourcesContent":["/**\n * Obs: O controle de estado principal da aplica√ß√£o deve ser mantido neste hook\n */\n\nimport { useState } from \"react\";\n\ntype Player = 'X' | 'O'\n\nconst useGameState = () => {\n  // Transforma todas as variaveis let em variaveis de estado\n  const [stepNumber, setStepNumber] = useState(0);\n  const [nextPlayer, setNextPlayer] = useState<Player>('X');\n  const [currentBoard, setCurrentBoard] = useState(Array(9).fill(null));\n\n  // C√≥digo que reseta tabuleiro\n  const resetGame = () => {    \n    setCurrentBoard([]);\n    setStepNumber(0); \n  }\n\n  const computeMove = (nextPlayer: Player, squareId: any) => {\n    // Adiciona jogada no array no tabuleiro\n    currentBoard[squareId] = nextPlayer;\n    setCurrentBoard(currentBoard);\n\n    if (nextPlayer === 'X') {\n      setNextPlayer('O');\n    } else {\n      setNextPlayer('X');\n    }\n    setStepNumber((currentStepNumber) => currentStepNumber + 1);\n  }\n\n  return {\n    nextPlayer,\n    stepNumber,\n    currentBoard,\n    computeMove,\n    resetGame\n  }\n}\n\nexport default useGameState;\n","import useGameState from \"./useGameState\";\n\nfunction calculateWinner(squares: any) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6]\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\n\n// Adiciona bot√£o para resetar o tabuleiro ap√≥s o final da partida\nfunction ResetButton({ isDisplayed, resetGame }: any) {\n  return (isDisplayed\n    ? <>\n        <br />\n        <button data-testid={`resetButton`} onClick={resetGame}>Reset</button>\n      </>\n    : null)\n}\n\nfunction Square({ id, value, onClick }: any) {\n  return (\n    <button data-testid={`square-${id}`} className=\"square\" onClick={onClick}>\n      {value === 'X' ? \"‚ùå\" : value === 'O' ? \"‚≠ï\" : null}\n    </button>\n  );\n}\n\nconst Board = ({ squares, onSquareClick }: any) => {\n  const renderSquare = (squareId: number) => {\n    return (\n      <Square\n        id={squareId}\n        value={squares[squareId]}\n        onClick={() => onSquareClick(squareId)}\n      />\n    );\n  };\n\n  return (\n    <div>\n      <div className=\"board-row\">\n        {renderSquare(0)}\n        {renderSquare(1)}\n        {renderSquare(2)}\n      </div>\n      <div className=\"board-row\">\n        {renderSquare(3)}\n        {renderSquare(4)}\n        {renderSquare(5)}\n      </div>\n      <div className=\"board-row\">\n        {renderSquare(6)}\n        {renderSquare(7)}\n        {renderSquare(8)}\n      </div>\n    </div>\n  );\n};\n\nconst Game: React.FC = () => {\n  const {\n    currentBoard,\n    stepNumber,\n    nextPlayer,\n    computeMove,\n    resetGame,\n  } = useGameState();\n\n  const handleSquareClick = (squareId: number) => {\n    if (calculateWinner(currentBoard) || currentBoard[squareId]) {\n      // Game over or square already handled\n      return;\n    }\n\n    computeMove(nextPlayer, squareId);\n  };\n\n  const renderStatusMessage = () => {\n    const winner = calculateWinner(currentBoard);\n    \n    if (winner) {\n      return `Winner: ${winner}`;\n    } else if (stepNumber === 9) {\n      return \"Draw: Game over\";\n    } else {\n      return `Next player: ${(nextPlayer === 'X' ? \"‚ùå\" : \"‚≠ï\")}`;\n    }\n  };\n\n  return (\n    <>\n      <h1>\n        TIC-TAC-LIVEN{\" \"}\n        <span role=\"img\" aria-label=\"rocket\">\n          üöÄ\n        </span>\n      </h1>\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board squares={currentBoard} onSquareClick={handleSquareClick} />\n        </div>\n        <div className=\"game-info\">\n          <div>Current step: {stepNumber}</div>\n          <div>{renderStatusMessage()}</div>\n\n          {/* Bot√£o de resetar partida */}\n          <ResetButton\n            isDisplayed={!!calculateWinner(currentBoard) || stepNumber === 9}\n            resetGame={resetGame}\n          />\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Game;\n","import \"./styles.css\";\nimport Game from \"./Game\";\n\nexport default function App() {\n  return <Game />;\n}\n","import { render } from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nrender(<App />, rootElement);\n"],"sourceRoot":""}